什么是复杂度分析？
1.数据结构和算法解决的是“如何让计算机运行的时间更快，更省空间的解决问题”
2.需要从两个维度来评估算法的性能：时间，空间，二者统称复杂度
3.复杂度描述的是算法执行时间或占用空间与数据规模增长的关系

为什么要进行复杂度分析？
1.和性能测试相比，不依赖执行环境，成本低，效率高，易操作，指导性强
2.掌握复杂度分析有利于编写性能优化的代码，有利于降低系统开发和维护的成本


如何进行复杂度分析？
1.大O分析法
算法执行时间和数据规模成正比
T(n) = O(f(n)) 
特点：时间复杂度描述的是算法执行时间与数据规模的增长趋势变化
所以常量阶，低阶，及系数对增长趋势不产生决定性影响
分析方法：
（1）单段代码看高频：循环
（2）多段代码取最大：多重循环
（3）嵌套代码求乘积:递归，多重循环
（4）多个规模求加和：两个参数分别控制循环次数

常用复杂度级别？
多项式阶：
O(1) 常数阶
O(logn)  对数阶
O(n)  线性阶
O(nlogn) 线性对数阶
O(n^2)  平方阶
O(n^3)  立方阶
非多项式阶：
O(2^n)  指数阶
O(n!) 阶乘阶